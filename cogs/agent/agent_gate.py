# cogs/agent/agent_gate.py
# ISERO ‚Äì Agent Gate (mention/wake-word kapu + modellh√≠v√°s + biztons√°gos k√ºld√©s)
# Jav√≠t√°s: 50035 "Unknown message" elker√ºl√©se (fail_if_not_exists + fallback send)

from __future__ import annotations

import os
import re
import time
import json
import logging
from dataclasses import dataclass, field
from typing import Dict, Optional, List

import httpx
import discord
from discord.ext import commands

log = logging.getLogger("bot.agent_gate")


# ----------------------------
# Konfigur√°ci√≥ olvas√°sa (ENV)
# ----------------------------

def _csv_list(val: str | None) -> List[str]:
    if not val:
        return []
    return [x.strip() for x in val.split(",") if x.strip()]

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_APIKEY") or os.getenv("OPENAI_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_MODEL_HEAVY = os.getenv("OPENAI_MODEL_HEAVY", "gpt-4o")

# Csatorna whitelist ‚Äì ha √ºres, **nem** korl√°tozunk (figyelmeztet√©ssel),
# hogy tesztelni tudd. Ha szigor√∫ whitelistet szeretn√©l, t√∂ltsd fel CSV-vel.
AGENT_ALLOWED_CHANNELS = _csv_list(os.getenv("AGENT_ALLOWED_CHANNELS", "").strip())
if not AGENT_ALLOWED_CHANNELS:
    log.warning("AGENT_ALLOWED_CHANNELS √ºres ‚Äì agent v√°laszolhat minden csatorn√°ban (teszt m√≥d).")

# Wake szavak (mention mellett)
WAKE_WORDS = [w.lower() for w in _csv_list(os.getenv("WAKE_WORDS", "isero,x"))]

# Napi token limit (egyszer≈±, best-effort becsl√©s) √©s cooldown
AGENT_DAILY_TOKEN_LIMIT = int(os.getenv("AGENT_DAILY_TOKEN_LIMIT", "20000"))
AGENT_REPLY_COOLDOWN_SECONDS = int(os.getenv("AGENT_REPLY_COOLDOWN_SECONDS", "20"))

OWNER_ID = int(os.getenv("OWNER_ID", "0"))

# Max v√°lasz hossz (Discord 2000 limit alatt maradunk)
MAX_REPLY_CHARS = 1900


# ----------------------------
# Seg√©d: egyszer≈± token-becsl√©s
# ----------------------------

def approx_token_count(text: str) -> int:
    # durva becsl√©s (4 char ~ 1 token)
    return max(1, len(text) // 4)


# ----------------------------
# Napi k√∂nyvel√©s (mem√≥ria)
# ----------------------------

@dataclass
class Budget:
    day_key: str
    spent: int = 0


# ----------------------------
# OpenAI h√≠v√°s
# ----------------------------

async def call_openai_chat(messages: list[dict], model: str, timeout_s: float = 30.0) -> str:
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY hi√°nyzik az ENV-b≈ël")

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {"model": model, "messages": messages, "temperature": 0.6, "max_tokens": 500}

    async with httpx.AsyncClient(timeout=timeout_s) as client:
        r = await client.post("https://api.openai.com/v1/chat/completions",
                              headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        text = data["choices"][0]["message"]["content"]
        return text.strip()


# ----------------------------
# A Cog
# ----------------------------

class AgentGate(commands.Cog):
    """Mention/Wake kapu, napi keret, cooldown; biztons√°gos v√°lasz-k√ºld√©s."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self._user_cooldowns: Dict[int, float] = {}
        self._budget = Budget(day_key=self._today_key())

    # -------- utilok --------

    def _today_key(self) -> str:
        return time.strftime("%Y-%m-%d")

    def _reset_budget_if_new_day(self):
        today = self._today_key()
        if self._budget.day_key != today:
            self._budget = Budget(day_key=today)

    def _check_and_book_tokens(self, tokens: int) -> bool:
        """Igaz, ha m√©g belef√©r a napi keretbe √©s k√∂nyveli."""
        self._reset_budget_if_new_day()
        if self._budget.spent + tokens > AGENT_DAILY_TOKEN_LIMIT:
            return False
        self._budget.spent += tokens
        return True

    def _is_allowed_channel(self, channel: discord.abc.GuildChannel | discord.Thread) -> bool:
        """Ha van whitelist, csak ott; ha √ºres, engedj√ºk (tesztbar√°t)."""
        if not AGENT_ALLOWED_CHANNELS:
            return True
        try:
            cid = str(channel.id)
        except Exception:
            return False
        return cid in AGENT_ALLOWED_CHANNELS

    def _is_wake(self, message: discord.Message) -> bool:
        # Mention?
        if self.bot.user and self.bot.user.mentioned_in(message):
            return True
        # Wake words?
        content = (message.content or "").lower()
        for w in WAKE_WORDS:
            # sz√≥ elej√©n/sz√≥k√∂zzel, vagy egyszer≈± tartalmaz√°s
            if re.search(rf"(^|\s){re.escape(w)}(\s|[!?.,:]|$)", content):
                return True
        return False

    def _cooldown_ok(self, user_id: int) -> bool:
        last = self._user_cooldowns.get(user_id, 0)
        if (time.time() - last) >= AGENT_REPLY_COOLDOWN_SECONDS:
            self._user_cooldowns[user_id] = time.time()
            return True
        return False

    async def _safe_send_reply(self, message: discord.Message, text: str):
        """Biztons√°gos k√ºld√©s: reference, de ha 50035, akkor sima send."""
        text = text.strip()
        if len(text) > MAX_REPLY_CHARS:
            text = text[:MAX_REPLY_CHARS] + "‚Ä¶"

        # Pr√≥b√°ljuk meg referenci√°val ‚Äì ne bukjon el, ha elt≈±nt a source.
        ref = message.to_reference(fail_if_not_exists=False)
        try:
            await message.channel.send(
                content=text,
                reference=ref,
                allowed_mentions=discord.AllowedMentions.none(),
            )
        except discord.HTTPException as e:
            # 50035 ‚Äì Invalid Form Body / Unknown message ‚Üí ess√ºnk vissza sim√°ra
            code = getattr(e, "code", None)
            log.warning("Reply reference bukott (code=%s) ‚Äì fallback sima send.", code)
            await message.channel.send(
                content=text,
                allowed_mentions=discord.AllowedMentions.none(),
            )

    # -------- esem√©nyek --------

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        # 1) Ne reag√°ljunk botokra / saj√°t magunkra
        if message.author.bot:
            return
        if self.bot.user and message.author.id == self.bot.user.id:
            return

        # 2) Csatorna whitelist
        if not self._is_allowed_channel(message.channel):
            return

        # 3) Mentions / wake words kapu
        if not self._is_wake(message):
            return

        # 4) Cooldown (owner kiv√©tel)
        if message.author.id != OWNER_ID and not self._cooldown_ok(message.author.id):
            return

        # 5) Prompt k√©sz√≠t√©s
        user_text = (message.content or "").strip()
        # vegy√ºk le a botneveket / wake szavakat a prompt elej√©r≈ël, hogy tiszt√°bb legyen
        lowered = user_text.lower()
        for w in WAKE_WORDS:
            lowered = re.sub(rf"(^|\s){re.escape(w)}(\s|[!?.,:]|$)", " ", lowered)
        if self.bot.user:
            mention = f"<@{self.bot.user.id}>"
            lowered = lowered.replace(mention, " ")
        user_prompt = re.sub(r"\s+", " ", lowered).strip()
        if not user_prompt:
            user_prompt = (message.content or "").strip()

        # 6) Token keret check (durva becsl√©s)
        est = approx_token_count(user_prompt) + 150  # + v√°laszkeret
        if not self._check_and_book_tokens(est):
            await self._safe_send_reply(message, "Napi AI-keret√ºnk most elfogyott. Pr√≥b√°ld meg k√©s≈ëbb. üôè")
            return

        # 7) OpenAI h√≠v√°s
        system_msg = (
            "You are ISERO agent. Be concise (‚â§300 chars if possible). "
            "Hungarian-friendly tone, casual, helpful. Avoid unsafe content."
        )
        messages = [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": user_prompt},
        ]

        model = OPENAI_MODEL
        # Egyszer≈± szab√°ly: ownernek engedj√ºk a heavy modellt @mention eset√©n
        if message.author.id == OWNER_ID and self.bot.user and self.bot.user.mentioned_in(message):
            model = OPENAI_MODEL_HEAVY

        try:
            reply_text = await call_openai_chat(messages, model=model)
        except httpx.HTTPError as e:
            log.exception("OpenAI hiba: %s", e)
            await self._safe_send_reply(message, "Most akadozom az AI-n√°l. Pr√≥b√°ljuk √∫jra kicsit k√©s≈ëbb. üôá")
            return
        except Exception as e:
            log.exception("V√°ratlan AI hiba: %s", e)
            await self._safe_send_reply(message, "Valami v√°ratlan t√∂rt√©nt. Jelentem a staffnak. ‚ö†Ô∏è")
            return

        # 8) Biztons√°gos k√ºld√©s (50035 fix)
        try:
            await self._safe_send_reply(message, reply_text)
        except Exception as e:
            log.exception("K√ºld√©si hiba: %s", e)


# -------- setup (cog regisztr√°ci√≥) --------

async def setup(bot: commands.Bot):
    await bot.add_cog(AgentGate(bot))
