# cogs/agent/policy.py
from __future__ import annotations

import re
import time
from dataclasses import dataclass
from typing import Optional

# ---- Heurisztik√°khoz regexek ----
_RE_BOT_PROBE = re.compile(
    r"\b(ai|bot|chatgpt|gpt|mesters√©ges|korl√°t|limit|cutoff|meddig tud|tud√°sod|mik a k√©pess√©geid)\b",
    re.I,
)
_RE_PING = re.compile(r"\bping(el|elsz|elek|etek|etni)?\b", re.I)
_RE_PROMO_INTENT = re.compile(
    r"\b(mebinu|commission|komiss|√°r|mennyi|v√°s√°rol(n|ni)|venn√©k|megrendel(√©s|ni))\b", re.I
)
_RE_QUESTION = re.compile(r"[?]")

# Cuki/infantilis emojik tilt√≥lista ‚Äì ezeket SOHA
CUTE_EMOJI = {"ü•∫", "üòä", "üòÅ", "üòá", "ü•∞", "üòç", "üòò", "üòú", "ü§ó", "‚ú®", "üíñ", "üíï", "üíì", "üå∏", "‚ú®"}

# Engedett, ritk√°n haszn√°lt neutr√°lis emojik (ha nagyon musz√°j)
ALLOWED_EMOJI = {"üôÇ", "üòê", "üòë", "üó°Ô∏è"}

@dataclass
class Decision:
    allow: bool
    ask_clarify: bool = False
    use_heavy: bool = False
    max_chars: int = 300
    tone_dial: int = 1  # -2 .. +2 (negat√≠v = higgadtabb; pozit√≠v = cs√≠p≈ësebb)
    marketing_nudge: bool = False
    say_pong: bool = False
    persona_deflect: Optional[str] = None  # ha AI/limit k√©rd√©s: fix in-character v√°lasz


class PolicyEngine:
    def __init__(self,
                 owner_id: int,
                 reply_cooldown_s: int = 20,
                 engaged_window_s: int = 30):
        self.owner_id = owner_id
        self.reply_cooldown_s = reply_cooldown_s
        self.engaged_window_s = engaged_window_s
        self._last_user_reply: dict[int, float] = {}
        self._last_channel_reply: dict[int, float] = {}

    # ---- anti-spam / ablakok ----
    def _cooldown_ok(self, user_id: int) -> bool:
        t = time.time()
        last = self._last_user_reply.get(user_id, 0.0)
        if t - last >= self.reply_cooldown_s:
            self._last_user_reply[user_id] = t
            return True
        return False

    def _channel_window_ok(self, channel_id: int) -> bool:
        t = time.time()
        last = self._last_channel_reply.get(channel_id, 0.0)
        if t - last >= self.engaged_window_s:
            self._last_channel_reply[channel_id] = t
            return True
        return False

    # ---- f≈ë d√∂nt√©s ----
    def decide(self,
               *,
               author_id: int,
               channel_id: int,
               is_owner: bool,
               is_allowed_channel: bool,
               is_profane: bool,
               content: str,
               user_style_dial: int | None = None,
               promo_score: int = 0,
               engagement_score: int = 0) -> Decision:

        low = content.lower().strip()

        # Prof√°nra az agent NEM reag√°l
        if is_profane:
            return Decision(allow=False)

        # Csatorna whitelist
        if not is_allowed_channel:
            return Decision(allow=False)

        # PING r√∂vid v√°lasz
        if _RE_PING.search(low):
            return Decision(allow=True, say_pong=True, max_chars=10)

        # Owner: mindig engedj√ºk, heavy modell is mehet, hosszabb v√°lasz is mehet
        if is_owner:
            # ha direkt AI/limit t√©m√°ra nyom, akkor is persona-deflect
            persona = self._persona_deflect_if_needed(low)
            return Decision(
                allow=True,
                use_heavy=True,
                max_chars=900,
                tone_dial=self._merge_tone(user_style_dial, 2),
                marketing_nudge=_RE_PROMO_INTENT.search(low) is not None,
                persona_deflect=persona,
            )

        # Anti-spam ablakok (user √©s channel)
        if not self._cooldown_ok(author_id):
            return Decision(allow=False)
        if not self._channel_window_ok(channel_id):
            return Decision(allow=False)

        # AI/limit/probe ‚Üí soha nem valljuk be, persona-fix
        persona = self._persona_deflect_if_needed(low)
        if persona:
            return Decision(
                allow=True,
                max_chars=220,
                tone_dial=self._merge_tone(user_style_dial, 1),
                persona_deflect=persona,
            )

        # Ha nincs k√©rd≈ëjel √©s nincs konkr√©t k√©r√©s, nagy es√©llyel ignor
        if not _RE_QUESTION.search(low) and not _RE_PROMO_INTENT.search(low):
            # r√∂vid, cs√≠p≈ës el√ºt√©s n√©ha hasznosabb az ignorn√°l ‚Äì itt most ignor
            return Decision(allow=False)

        # Promo sz√°nd√©k
        if _RE_PROMO_INTENT.search(low) or promo_score >= 2:
            return Decision(
                allow=True,
                max_chars=260,
                marketing_nudge=True,
                tone_dial=self._merge_tone(user_style_dial, 2),
            )

        # Norm√°l k√©rd√©s
        # Engagement alapj√°n hosszhat√°r
        cap = 280 if engagement_score < 2 else 360
        return Decision(
            allow=True,
            ask_clarify=len(low) < 8,  # ‚Äúmi van?‚Äù t√≠pus√∫ r√∂vidke
            max_chars=cap,
            tone_dial=self._merge_tone(user_style_dial, 1),
        )

    # ---- persona v√©delem ----
    def _persona_deflect_if_needed(self, low: str) -> Optional[str]:
        if _RE_BOT_PROBE.search(low):
            # Nem valljuk be, nem besz√©l√ºnk cutoffr√≥l, nincs ‚Äú√©n csak AI‚Ä¶‚Äù
            return (
                "Nem √©rdekes, mi vagyok. A l√©nyeg, hogy m≈±k√∂d√∂m. "
                "K√©rdezz konkr√©tan, √©s kapsz v√°laszt. Ha nem, annak is oka van."
            )
        return None

    @staticmethod
    def _merge_tone(user_dial: Optional[int], base: int) -> int:
        if user_dial is None:
            return base
        x = max(-2, min(2, user_dial + base))
        return x

    # ---- seg√©d: emoji sz≈±r√©s ----
    @staticmethod
    def scrub_emojis(text: str) -> str:
        # cuki emojik kuka; engedett maradhat ritk√°n
        out = []
        for ch in text:
            if ch in CUTE_EMOJI:
                continue
            out.append(ch)
        return "".join(out)
